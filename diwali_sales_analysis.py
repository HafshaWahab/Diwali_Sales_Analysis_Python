# -*- coding: utf-8 -*-
"""Diwali_Sales_Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/diwali-sales-analysis-07a80cf5-eb30-45a9-b79c-3c99ff1d38b1.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240519/auto/storage/goog4_request%26X-Goog-Date%3D20240519T083430Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D0956ae2071e660424568d085077db507e6e86617b8ccc7d4534896a07a3ccecc30f3e8d1737709e7d9896f1b75786301bc6a43b083f5ad19b3a99b2d7011c32c0d8d85f5f21974ef279835f5eb210bd491c4f6c38078de129e581d8927013142a1e2e918295514b353fc82df5ab953a3366df5c627b18dceb536bd3173ad600e872aa185f172ae76025ef881d22c8a5aa9da77f0fbdfd29d18ead6aea5463e5c820ea3c24be3d682d8f062affbcdbaaefdf6498a6f7a7735830fa2046a7082e9bfffa0cc5b5ae417422ff608061801e2c099a3e1956d4e37761b82e08ce6b1693d91ca8b1018ffa4d034d3b89a2a317ed04fc23b09077592f3475348d216df89
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'diwali-sales-python-analysis:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F5022945%2F8433634%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240519%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240519T083430Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D65b10887f9ff3d710ce0c397fed5b4fdf39059329f9dcc11607d4e2464573da895ac0f17a3b6357b4db26524248c79ff7bd718cc4282589e609a6d6a0c25327f55755606f5696d2924610e2a195757f18ebe3c24a45dad3c402590b8db168b3f4282a6b53636a44b5842cce68cbb49dec308b404cdc84523b182c4bf8c5802ad154235c4025882c90c083102d17e27b7d7656e25d67c122107b9d3b6972d9e101db4ac0d998933009cf6ab9f266212f92cedcfb6621ae7d67d9ab9dc1a227e9ee0aa9a3fcbef717912c47ea0ff630e2ea41b369038fe706677f0d303e9974b45a7503962c90d5cfa1ad3fe3f70780b55329134060a8b05e4ce10a2c04e5dd130'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""## Goals & KPIs

•	To understand the customers’ demographics (gender, age groups, marital status, occupation)

•	To understand which are the top performing states.

•	To analyse the performance of different product categories.

•	To find out the top purchasing customers.

**Questions solved in this analysis:**

•	To find out the total no. of male and female customers and who has generated the maximum buying capacity.

•	To analyse the different age groups of customers.

•	To find out the top 10 states on the basis of the most no. of orders placed and generated the maximum sales.

•	To analyse the marital status of the customers, maximum orders placed by which category of people and the sales generated by them.

•	Which category of professionals exhibit the maximum purchasing capacity and the sales generated by them?

•	Which are the top selling product categories and the sales generated by them?

•	 Who are the top performing Customers (User_ID)?

## Importing libraries and downloading file.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

df = pd.read_csv("/kaggle/input/diwali-sales-python-analysis/Diwali Sales Data.csv", encoding = 'unicode_escape')
# unicode_escape helps to parse the error while downloading file.

df

df.shape

df.head()

df.info()

"""## Data Cleaning"""

# deleting last 2 columns
df.drop(['Status','unnamed1'], axis=1, inplace = True)

# Checking null values
df.isnull().sum()

"""**We can either drop those 12 null values or replace those null values with the mean of that column. Here, we will be dropping the null values.**"""

df.dropna(inplace = True)

df.shape    # checking whether those 12 null values have been deleted or not.

# changing datatype of Amount column from float to int

df['Amount']= df['Amount'].astype('int')

# checking whether the datatype has changed or not.
df['Amount'].dtype

df.columns

df.describe()

# using describe() function for specific columns

df[['Age','Orders','Amount']].describe()

"""## Exploratory Data Analysis"""

df.columns

import os

# Set working directory to Kaggle working directory
os.chdir('/kaggle/working')

"""### Gender"""

ax = sns.countplot (x='Gender', data = df)     # count the total no. males and females.
sns.set(rc={'figure.figsize':(4,5)})
for bars in ax.containers:                    # to show the count of respective gender.
    ax.bar_label(bars)
plt.savefig('gender_count.png')

sales_gen = df.groupby(['Gender'], as_index = False)['Amount'].sum().sort_values(by = 'Amount', ascending = False)
sns.barplot(x='Gender', y = 'Amount', data = sales_gen)
sns.set(rc={'figure.figsize':(4,4)})
plt.savefig('gender_amount_spent.png')

"""***From the above two graphs we can say that the maximum no. of buyers are females and they have also generated the maximum revenue.***

### Age group
"""

ax = sns.countplot(x = 'Age Group', data = df, hue = 'Gender')         # total count of males and females in differnet age groups.
sns.set(rc={'figure.figsize':(25,6)})
for bars in ax.containers:                                            # to show the count of gender in different age groups.
    ax.bar_label(bars)
plt.savefig('age_group_bygender.png')

# spending power in different age groups.

sales_age = df.groupby('Age Group', as_index = False)['Amount'].sum().sort_values(by = 'Amount', ascending =  False)
sns.barplot(x='Age Group', y='Amount', data=sales_age)
sns.set(rc={'figure.figsize':(10,7)})
plt.savefig('age_group_amount.png')

"""***The maximum buyers are in the age group of 26-35 years of age, mostly being females.***

### Top 10 States by Orders
"""

sales_state = df.groupby(['State'], as_index = False)['Orders'].sum().sort_values(by = 'Orders', ascending =  False).head(10)  #head(10) gives top 10 states


# Set figure size
plt.figure(figsize=(18, 5))

# Plot the total orders placed in different states
ax = sns.barplot(x='State', y='Orders', data=sales_state)

# Label the bars with the count of orders
for bars in ax.containers:
    ax.bar_label(bars)

plt.show()
plt.savefig('sales_state.png')

"""### Top 10 states by Sales"""

sales_state = df.groupby(['State'], as_index=False)['Amount'].sum().sort_values(by='Amount', ascending=False).head(10)

# Set figure size
plt.figure(figsize=(18, 5))

# Plot the total amount spent in different states
ax = sns.barplot(x='State', y='Amount', data=sales_state)

# Label the bars with the amount spent and format y-axis tick labels as thousands (K)
for bars in ax.containers:
    ax.bar_label(bars, label_type='edge', fmt='Rs %.0f', fontsize=10)

plt.show()
plt.savefig('sales_state_amount.png')

"""***From the above two graphs we can say that most of the orders and sales have been made from Uttar Pradesh, Maharashtra and Karnataka.***

### Marital Status
"""

ax = sns.countplot (x='Marital_Status', data = df)     # count the total no. married and unmarried individuals.
sns.set(rc={'figure.figsize':(5,4)})
for bars in ax.containers:                    # to show the count of respective marital status.
    ax.bar_label(bars)
plt.savefig('marital_status_count.png')

sales_married_status = df.groupby(['Marital_Status', 'Gender'], as_index = False)['Amount'].sum().sort_values(by='Amount', ascending = False)

sns.set(rc={'figure.figsize':(6,5)})
sns.barplot(data=sales_married_status, x='Marital_Status', y='Amount', hue='Gender')
plt.savefig('marital_status_bygender.png')

"""***From the above two graphs we can see that most of the buyers are married women and they have the high purchasing power.***

### Occupation
"""

ax = sns.countplot(x='Occupation', data = df, order=df['Occupation'].value_counts().index)
sns.set(rc={'figure.figsize':(30,7)})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=15)
for bars in ax.containers:
    ax.bar_label(bars)
plt.savefig('occupation.png')

"""***From the above analysis we can see that people from IT Sector, Healthcare and Aviation are spending the most.***"""

sales_occupation = df.groupby(['Occupation'], as_index = False)['Amount'].sum().sort_values(by='Amount', ascending = False)

sns.set(rc={'figure.figsize':(20,5)})
ax=sns.barplot(data=sales_occupation, x='Occupation', y='Amount')
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=12)

plt.show()
plt.savefig('occupation_amount.png')

"""***From above graphs we can say that professionals from the IT sector, Healthcare and Aviation are spending the most.***

### Product Category
"""

sorted_categories = df['Product_Category'].value_counts().index.tolist()
ax = sns.countplot(x= 'Product_Category', data = df, order=sorted_categories)

sns.set(rc={'figure.figsize':(25,7)})
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=15)
for bars in ax.containers:
    ax.bar_label(bars)

plt.show
plt.savefig('product_categories_count.png')

"""***We can see here that maximum expenditure has been made on Clothing, Food and Electronic gadgets.***"""

sales_products = df.groupby(['Product_Category'], as_index= False)['Amount'].sum().sort_values(by='Amount', ascending= False)
sns.set(rc={'figure.figsize':(20,5)})
sns.barplot(x='Product_Category', y='Amount', data = sales_products)

ax = sns.barplot(x='Product_Category', y='Amount', data=sales_products)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=12)

plt.show()
plt.savefig('product_categories_amount.png')

"""***By analysing Product by Order data we found that Clothing, Food and Electronic Gadgets are the top categories where maximum no. of orders are placed.***

***By analysing Product by Amount data we found that Food, Clothing and Electronic Gadgets are the top categories where maximum no. of revenue are generated.***

### Product ID
"""

sales_product_id = df.groupby(['Product_ID'], as_index=False)['Orders'].sum().sort_values(by='Orders', ascending=False).head(10)
sns.set(rc={'figure.figsize':(20,5)})

ax = sns.barplot(x='Product_ID', y='Orders', data=sales_product_id)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=12)

plt.show()
plt.savefig('product_ID_orders.png')

# alternative way to present the above graph

fig1,ax1 = plt.subplots(figsize=(12,7))
df.groupby('Product_ID')['Orders'].sum().nlargest(10).sort_values(ascending=False).plot(kind='bar')

"""***The top 3 product_ID are: P00265242, P00110942, P00237542.***

### Top 10 Customers on the basis of no. of Orders and Sales
"""

top_customers_orders = df.groupby(['User_ID'], as_index=False)['Orders'].sum().sort_values(by='Orders', ascending=False).head(10)
sns.set(rc={'figure.figsize':(20,5)})

ax = sns.barplot(x='User_ID', y='Orders', data=top_customers_orders, order=top_customers_orders['User_ID'])
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=12)

for bars in ax.containers:
    ax.bar_label(bars)

plt.show()
plt.savefig('top_customersID_byorder.png')

top_customers_sales = df.groupby(['User_ID'], as_index=False)['Amount'].sum().sort_values(by='Amount', ascending=False).head(10)
sns.set(rc={'figure.figsize':(20,5)})

ax = sns.barplot(x='User_ID', y='Amount', data=top_customers_sales, order=top_customers_sales['User_ID'])
ax.set_xticklabels(ax.get_xticklabels(), rotation=45, fontsize=12)

for bars in ax.containers:
    ax.bar_label(bars)

plt.show()
plt.savefig('top_customersID_byamount.png')

"""***The top 3 user_ID are: 1001680, 1001941, 1003476.***

## Conclusion

***The maximum buyers are the married women between the age group of 26-35 years from the states of UP, Maharashtra and Karnataka, working in the IT, Healthcare and Aviation sectors.***
"""